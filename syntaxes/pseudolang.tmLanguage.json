{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "pseudolang",
	"patterns": [
		{ "include": "#keywords" },
		{ "include": "#strings" },
		{ "include": "#numeric-literal" },
		{ "include": "#variables" },
		{ "include": "#comments" }
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.pseudolang",
				"match": "\\b(START|END|CALL|REPEAT|UNTIL|END-REPEAT|SWITCH|CASE|END-CASE|BREAK|CONTINUE|IF|ELSE|END-IF|WHILE|END-WHILE|FOR|END-FOR|RETURN)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.pseudolang",
			"begin": "\"",
			"end": "\"",
			"patterns": [{
				"name": "constant.character.escape.pseudolang",
				"match": "\\\\."
			}]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.js",
					"match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.binary.js",
					"match": "\\b(?<!\\$)0(b|B)[01][01_]*\\b(?!\\$)"
				},
				{
					"name": "constant.numeric.octal.js",
					"match": "\\b(?<!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$)"
				},
				{
					"match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$)",
					"captures": {
						"0": {
							"name": "constant.numeric.decimal.js"
						},
						"1": {
							"name": "meta.delimiter.decimal.period.js"
						},
						"2": {
							"name": "meta.delimiter.decimal.period.js"
						},
						"3": {
							"name": "meta.delimiter.decimal.period.js"
						},
						"4": {
							"name": "meta.delimiter.decimal.period.js"
						},
						"5": {
							"name": "meta.delimiter.decimal.period.js"
						},
						"6": {
							"name": "meta.delimiter.decimal.period.js"
						}
					}
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"begin": "(?=(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(character|numeric|function|procedure)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))",
					"beginCaptures": {
						"1": { "name": "punctuation.whitespace.comment.leading.js" },
						"2": { "name": "variable.name.js" },
						"3": { 
							"name": "entity.name.function.js",
							"patterns": [{
								"begin": "\\.[a-z_A-Z]+(\\(.*\\))?",
								"beginCaptures": {
									"1": {
										"patterns": [
											{ "include": "#strings" },
											{ "include": "#variables" },
											{ "include": "#numeric-literal" }
										]
									}
								},
								"end": "(?=$)"
							}]
						}
					},
					"end": "(?=$)"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"contentName": "comment.line.double-slash.js",
					"begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.js"
						},
						"2": {
							"name": "comment.line.double-slash.js"
						}
					},
					"end": "(?=$)"
				},
				{
					"name": "comment.block.js",
					"begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.js"
						},
						"2": {
							"name": "storage.type.internaldeclaration.js"
						},
						"3": {
							"name": "punctuation.decorator.internaldeclaration.js"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.js"
						}
					}
				}
			]
		}
	},
	"scopeName": "source.pseudolang"
}